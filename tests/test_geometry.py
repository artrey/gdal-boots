import json
import pytest
from ctypes import CDLL, c_char_p
from ctypes.util import find_library

from gdal_boots.geometry import GeometryBuilder, make_valid_geojson, to_geojson, transform, transform_geojson


def get_geos_version():
    _lgeos = CDLL(find_library('geos_c'))
    GEOSversion = _lgeos.GEOSversion
    GEOSversion.restype = c_char_p
    GEOSversion.argtypes = []

    return tuple(int(v) for v in GEOSversion().decode().split("-")[0].split("."))


@pytest.fixture
def geometry_geojson_4326():
    return {
        "type": "Polygon",
        "coordinates": [
            [
                [2.295279, 48.860081],
                [2.291867, 48.857713],
                [2.293404, 48.856723],
                [2.296872, 48.859022],
                [2.295279, 48.860081],
            ]
        ],
    }


@pytest.fixture
def geometry_4326(geometry_geojson_4326):
    geometry = GeometryBuilder().create(geometry_geojson_4326)
    geometry.FlattenTo2D()
    return geometry


def test_create_geometry(geometry_geojson_4326, geometry_4326):
    geometry_geojson_upd = json.loads(geometry_4326.ExportToJson(options=["COORDINATE_PRECISION=6"]))
    assert geometry_geojson_upd == geometry_geojson_4326


def test_transform(geometry_4326):
    geometry_3857 = transform(geometry_4326, 4326, 3857)

    geometry_geojson_3857 = json.loads(geometry_3857.ExportToJson(options=["COORDINATE_PRECISION=1"]))
    assert geometry_geojson_3857 == {
        "type": "Polygon",
        "coordinates": [
            [
                [255509.3, 6251153.3],
                [255129.5, 6250752.7],
                [255300.6, 6250585.2],
                [255686.6, 6250974.1],
                [255509.3, 6251153.3],
            ]
        ],
    }


def test_transform_geojson(geometry_geojson_4326):
    geometry_geojson_3857 = transform_geojson(geometry_geojson_4326, 4326, 3857, precision=6)

    assert geometry_geojson_3857 == {
        "type": "Polygon",
        "coordinates": [
            [
                [255509.289508, 6251153.329039],
                [255129.467406, 6250752.662865],
                [255300.565463, 6250585.160244],
                [255686.621457, 6250974.143639],
                [255509.289508, 6251153.329039],
            ]
        ],
    }


def test_to_geojson(geometry_geojson_4326):
    geometry_builder = GeometryBuilder(flatten=True)
    geometry = geometry_builder(geometry_geojson_4326)
    geometry_geojson = to_geojson(geometry)
    assert geometry_geojson_4326 == json.loads(json.dumps(geometry_geojson))

    geom = {"type": "MultiPolygon", "coordinates": []}
    assert to_geojson(geometry_builder(geom)) == geom

    geom = {"type": "MultiPolygon", "coordinates": [[]]}
    assert to_geojson(geometry_builder(geom)) == geom

    geom = {"type": "Polygon", "coordinates": []}
    assert to_geojson(geometry_builder(geom)) == geom

    geom = {"type": "Point", "coordinates": [1, 2]}
    assert to_geojson(geometry_builder(geom)) == geom

    geom = {"type": "Point", "coordinates": [1, 2, 0]}
    assert to_geojson(GeometryBuilder(flatten=False).create(geom), flatten=False) == geom

    geom = {
        "type": "GeometryCollection",
        "geometries": [
            {
                "type": "Polygon",
                "coordinates": [
                    [
                        [123.912278634879272, -9.949630185704605],
                        [124.808855631265786, -9.945983073671636],
                        [124.65841639764534, -10.631108579799987],
                        [124.419945459363774, -10.627864806741233],
                        [124.41738744984022, -10.63329355209617],
                        [124.384577597635158, -10.780015859712114],
                        [124.378588059436339, -10.807524785302114],
                        [124.380592550665611, -10.810794106555676],
                        [124.598579474816674, -10.901208572619954],
                        [124.590119413296236, -10.939783777866964],
                        [123.91517943462776, -10.942551939489967],
                        [123.912278634879272, -9.949630185704605],
                    ],
                    [
                        [124.10718673231743, -10.547923283993253],
                        [123.983747968626105, -10.516935524633432],
                        [123.944589830279781, -10.689682964321847],
                        [123.959685665601114, -10.694799636598699],
                        [124.149827985925143, -10.743024910106957],
                        [124.1550455134511, -10.743005563201773],
                        [124.162079987947877, -10.716424523387417],
                        [124.195545675010933, -10.570104692584813],
                        [124.10718673231743, -10.547923283993253],
                    ],
                ],
            },
            {
                "type": "MultiLineString",
                "coordinates": [
                    [[123.91227863487927, -9.949630185704605], [124.10718673231743, -10.547923283993253]],
                    [[124.10718673231743, -10.547923283993253], [124.16207998794787, -10.716424523387417]],
                ],
            },
        ],
    }
    geom_geojson = to_geojson(GeometryBuilder(flatten=False).create(geom), flatten=True)
    assert geom_geojson == geom


@pytest.mark.skipif(
    get_geos_version() < (3, 8, 0),
    reason='GEOS 3.8 or later needed for MakeValid',
)
def test_make_valid():

    self_intersection = {
        "type": "Polygon",
        "coordinates": [
            [
                [28.377685, 53.533778],
                [28.388671, 54.278054],
                [26.768188, 53.504384],
                [26.845092, 54.226707],
                [28.377685, 53.533778],
            ]
        ],
    }

    result = make_valid_geojson(self_intersection, precision=6)

    assert result == {
        "type": "MultiPolygon",
        "coordinates": [
            [[[27.582652, 53.893235], [26.768188, 53.504384], [26.845092, 54.226707], [27.582652, 53.893235]]],
            [[[27.582652, 53.893235], [28.388671, 54.278054], [28.377685, 53.533778], [27.582652, 53.893235]]],
        ],
    }

    self_intersection_hole = {
        "type": "Polygon",
        "coordinates": [
            [
                [26.531982, 54.204223],
                [26.740722, 53.855766],
                [28.168945, 53.448806],
                [28.372192, 54.007768],
                [26.779174, 53.402982],
                [28.883056, 53.176411],
                [28.943481, 54.188155],
                [26.531982, 54.204223],
            ]
        ],
    }

    result = make_valid_geojson(self_intersection_hole, precision=6)

    assert result == {
        "type": "Polygon",
        "coordinates": [
            [
                [27.443987, 53.655377],
                [26.740722, 53.855766],
                [26.531982, 54.204223],
                [28.943481, 54.188155],
                [28.883056, 53.176411],
                [26.779174, 53.402982],
                [27.443987, 53.655377],
            ],
            # hole
            [[27.443987, 53.655377], [28.168945, 53.448806], [28.372192, 54.007768], [27.443987, 53.655377]],
        ],
    }

    invalid = {
        "type": "Polygon",
        "coordinates": [
            [
                [123.912279, -9.94963],
                [124.808856, -9.945983],
                [124.658416, -10.631109],
                [124.419945, -10.627865],
                [124.417387, -10.633294],
                [124.384578, -10.780016],
                [124.378588, -10.807525],
                [124.380593, -10.810794],
                [124.598579, -10.901209],
                [124.590119, -10.939784],
                [123.915179, -10.942552],
                [123.912279, -9.94963],
                [124.16208, -10.716425],
                [124.195546, -10.570105],
                [123.983748, -10.516936],
                [123.94459, -10.689683],
                [123.959686, -10.6948],
                [124.149828, -10.743025],
                [124.155046, -10.743006],
                [124.16208, -10.716425],
                [123.912279, -9.94963],
            ]
        ],
    }

    result = make_valid_geojson(invalid, precision=6)

    assert result == {
        "type": "Polygon",
        "coordinates": [
            [
                [123.912279, -9.94963],
                [124.808856, -9.945983],
                [124.658416, -10.631109],
                [124.419945, -10.627865],
                [124.417387, -10.633294],
                [124.384578, -10.780016],
                [124.378588, -10.807525],
                [124.380593, -10.810794],
                [124.598579, -10.901209],
                [124.590119, -10.939784],
                [123.915179, -10.942552],
                [123.912279, -9.94963],
            ],
            [
                [124.107187, -10.547924],
                [123.983748, -10.516936],
                [123.94459, -10.689683],
                [123.959686, -10.6948],
                [124.149828, -10.743025],
                [124.155046, -10.743006],
                [124.16208, -10.716425],
                [124.195546, -10.570105],
                [124.107187, -10.547924],
            ],
        ],
    }

    invalid = {
        "type": "MultiPolygon",
        "coordinates": [
            [
                [
                    [123.912279, -9.94963],
                    [124.808856, -9.945983],
                    [124.658416, -10.631109],
                    [124.419945, -10.627865],
                    [124.417387, -10.633294],
                    [124.384578, -10.780016],
                    [124.378588, -10.807525],
                    [124.380593, -10.810794],
                    [124.598579, -10.901209],
                    [124.590119, -10.939784],
                    [123.915179, -10.942552],
                    [123.912279, -9.94963],
                    [124.16208, -10.716425],
                    [124.195546, -10.570105],
                    [123.983748, -10.516936],
                    [123.94459, -10.689683],
                    [123.959686, -10.6948],
                    [124.149828, -10.743025],
                    [124.155046, -10.743006],
                    [124.16208, -10.716425],
                    [123.912279, -9.94963],
                ]
            ]
        ],
    }

    result = make_valid_geojson(invalid, precision=6)

    assert result == {
        "type": "MultiPolygon",
        "coordinates": [
            [
                [
                    [123.912279, -9.94963],
                    [124.808856, -9.945983],
                    [124.658416, -10.631109],
                    [124.419945, -10.627865],
                    [124.417387, -10.633294],
                    [124.384578, -10.780016],
                    [124.378588, -10.807525],
                    [124.380593, -10.810794],
                    [124.598579, -10.901209],
                    [124.590119, -10.939784],
                    [123.915179, -10.942552],
                    [123.912279, -9.94963],
                ],
                [
                    [124.107187, -10.547924],
                    [123.983748, -10.516936],
                    [123.94459, -10.689683],
                    [123.959686, -10.6948],
                    [124.149828, -10.743025],
                    [124.155046, -10.743006],
                    [124.16208, -10.716425],
                    [124.195546, -10.570105],
                    [124.107187, -10.547924],
                ],
            ]
        ],
    }

    #

    invalid = {
        "type": "MultiPolygon",
        "coordinates": [
            [
                [
                    [123.912279, -9.94963],
                    [124.808856, -9.945983],
                    [124.658416, -10.631109],
                    [124.419945, -10.627865],
                    [124.417387, -10.633294],
                    [124.384578, -10.780016],
                    [124.378588, -10.807525],
                    [124.380593, -10.810794],
                    [124.598579, -10.901209],
                    [124.590119, -10.939784],
                    [123.915179, -10.942552],
                    [123.912279, -9.94963],
                    [124.16208, -10.716425],
                    [124.195546, -10.570105],
                    [123.983748, -10.516936],
                    [123.94459, -10.689683],
                    [123.959686, -10.6948],
                    [124.149828, -10.743025],
                    [124.155046, -10.743006],
                    [124.16208, -10.716425],
                    [123.912279, -9.94963],
                ]
            ],
            [
                [
                    [124.012279, -9.84963],
                    [124.908856, -9.845983],
                    [124.758416, -10.531109],
                    [124.519945, -10.527865],
                    [124.517387, -10.533294],
                    [124.484578, -10.680016],
                    [124.478588, -10.707525],
                    [124.480593, -10.710794],
                    [124.698579, -10.801209],
                    [124.690119, -10.839784],
                    [124.015179, -10.842552],
                    [124.012279, -9.84963],
                    [124.26208, -10.616425],
                    [124.295546, -10.470105],
                    [124.083748, -10.416936],
                    [124.04459, -10.589683],
                    [124.059686, -10.5948],
                    [124.249828, -10.643025],
                    [124.255046, -10.643006],
                    [124.26208, -10.616425],
                    [124.012279, -9.84963],
                ]
            ],
        ],
    }

    result = make_valid_geojson(invalid, precision=6)

    assert result == {
        "type": "MultiPolygon",
        "coordinates": [
            [
                [
                    [124.496008, -10.6289],
                    [124.484578, -10.680016],
                    [124.478588, -10.707525],
                    [124.480593, -10.710794],
                    [124.698579, -10.801209],
                    [124.690119, -10.839784],
                    [124.452833, -10.840757],
                    [124.380593, -10.810794],
                    [124.378588, -10.807525],
                    [124.384578, -10.780016],
                    [124.417387, -10.633294],
                    [124.419945, -10.627865],
                    [124.496008, -10.6289],
                ]
            ],
            [
                [
                    [124.452833, -10.840757],
                    [124.598579, -10.901209],
                    [124.590119, -10.939784],
                    [123.915179, -10.942552],
                    [123.912279, -9.94963],
                    [124.01257, -9.949222],
                    [124.013478, -10.260274],
                    [124.01425, -10.524593],
                    [123.983748, -10.516936],
                    [123.94459, -10.689683],
                    [123.959686, -10.6948],
                    [124.014788, -10.708775],
                    [124.015179, -10.842552],
                    [124.452833, -10.840757],
                ]
            ],
            [
                [
                    [124.01257, -9.949222],
                    [124.012279, -9.84963],
                    [124.908856, -9.845983],
                    [124.758416, -10.531109],
                    [124.680606, -10.530051],
                    [124.808856, -9.945983],
                    [124.044681, -9.949091],
                    [124.01257, -9.949222],
                ]
            ],
            [
                [
                    [124.680606, -10.530051],
                    [124.658416, -10.631109],
                    [124.496008, -10.6289],
                    [124.517387, -10.533294],
                    [124.519945, -10.527865],
                    [124.680606, -10.530051],
                ]
            ],
            [
                [
                    [124.182759, -10.626014],
                    [124.16208, -10.716425],
                    [124.155046, -10.743006],
                    [124.149828, -10.743025],
                    [124.014788, -10.708775],
                    [124.01425, -10.524593],
                    [124.056917, -10.535304],
                    [124.04459, -10.589683],
                    [124.059686, -10.5948],
                    [124.128112, -10.612155],
                    [124.182759, -10.626014],
                ]
            ],
            [
                [
                    [124.056917, -10.535304],
                    [124.075856, -10.451751],
                    [124.083748, -10.416936],
                    [124.207187, -10.447924],
                    [124.295546, -10.470105],
                    [124.26208, -10.616425],
                    [124.255046, -10.643006],
                    [124.249828, -10.643025],
                    [124.182759, -10.626014],
                    [124.195546, -10.570105],
                    [124.107187, -10.547924],
                    [124.056917, -10.535304],
                ]
            ],
        ],
    }

    invalid = {
        "type": "MultiPolygon",
        "coordinates": [
            [
                [
                    [-64.68714058399202, -32.861118804667285],
                    [-64.6864539384842, -32.86132157660591],
                    [-64.68623399734498, -32.86143873351471],
                    [-64.68608379364015, -32.861416203351965],
                    [-64.68597114086153, -32.86139817921763],
                    [-64.675086879045, -32.86365326435944],
                    [-64.67681407928468, -32.86956724268864],
                    [-64.6775007247925, -32.869495152755626],
                    [-64.67959284782411, -32.867909159400845],
                    [-64.67930853366853, -32.86739100201506],
                    [-64.67965185642244, -32.866782726437975],
                    [-64.6802580356598, -32.86650787462344],
                    [-64.68149185180665, -32.86622401037976],
                    [-64.68181371688844, -32.866246539321175],
                    [-64.68237698078157, -32.86628709140132],
                    [-64.68290269374849, -32.86619246985216],
                    [-64.68310654163362, -32.86597619164636],
                    [-64.682993888855, -32.86577793616101],
                    [-64.68281686306001, -32.86548505792849],
                    [-64.6821302175522, -32.864971392231006],
                    [-64.6814811229706, -32.86509305016507],
                    [-64.68131482601167, -32.864263970566945],
                    [-64.68188881874086, -32.864128793810636],
                    [-64.68313336372377, -32.863637649861836],
                    [-64.68377172946931, -32.86358357880219],
                    [-64.68393802642824, -32.86372326230553],
                    [-64.68402385711671, -32.8639170164782],
                    [-64.68427062034608, -32.86398460504349],
                    [-64.68424379825593, -32.86419187632255],
                    [-64.68436717987062, -32.86412428791522],
                    [-64.6843457221985, -32.86411077022756],
                    [-64.68428134918214, -32.86416033507221],
                    [-64.68431353569032, -32.864173852752295],
                    [-64.68420624732973, -32.864196382214544],
                    [-64.68417942523958, -32.864164840965806],
                    [-64.68424379825593, -32.864119782019564],
                    [-64.684254527092, -32.86417835864521],
                    [-64.68431890010835, -32.864173852752295],
                    [-64.68424916267396, -32.86414681739005],
                    [-64.68421161174776, -32.86414231149554],
                    [-64.68422234058382, -32.864209899889154],
                    [-64.68446910381319, -32.86413329970584],
                    [-64.68455493450166, -32.86408373484609],
                    [-64.68458175659181, -32.864128793810636],
                    [-64.68468368053438, -32.86421440578022],
                    [-64.68473196029665, -32.86435408829001],
                    [-64.6847426891327, -32.86448025294846],
                    [-64.68512356281282, -32.86471005240091],
                    [-64.68533244499794, -32.86492231308557],
                    [-64.68577802181245, -32.86394405191049],
                    [-64.68632519245149, -32.863101443729555],
                    [-64.6868133544922, -32.862466102855606],
                    [-64.68733163767541, -32.861778521380465],
                    [-64.68715986811219, -32.86114174859688],
                    [-64.68714058399202, -32.861118804667285],
                ]
            ]
        ],
    }

    result = make_valid_geojson(invalid, precision=6)

    # splitted to polygons
    assert len(result["coordinates"]) == 6
